{"version":3,"file":"start.js","mappings":"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","sources":["webpack://audio/./music.ts","webpack://audio/webpack/bootstrap","webpack://audio/./start.ts"],"sourcesContent":["// Select all the elements in the HTML page\r\n// and assign them to a variable\r\nexport class Music {\r\n\r\n\r\n\r\n    now_playing: HTMLElement = document.querySelector(\".now-playing\");\r\n    track_art: HTMLElement = document.querySelector(\".track-art\");\r\n    track_name: HTMLElement = document.querySelector(\".track-name\");\r\n    track_artist: HTMLElement = document.querySelector(\".track-artist\");\r\n\r\n    playpause_btn: HTMLElement = document.querySelector(\".playpause-track\");\r\n    next_btn: HTMLElement = document.querySelector(\".next-track\");\r\n    prev_btn: HTMLElement = document.querySelector(\".prev-track\");\r\n\r\n    name: string = \"eded\"\r\n    seek_slider: HTMLInputElement = document.querySelector(\".seek_slider\");\r\n    volume_slider: HTMLInputElement = document.querySelector(\".volume_slider\");\r\n    curr_time: HTMLElement = document.querySelector(\".current-time\");\r\n    total_duration: HTMLElement = document.querySelector(\".total-duration\");\r\n\r\n    // Specify globally used values\r\n    track_index = 0;\r\n    isPlaying = false;\r\n    updateTimer;\r\n\r\n    // Create the audio element for the player\r\n    curr_track: HTMLAudioElement = document.createElement('audio');\r\n    // auda:HTMLElement=document.getElementById(\"audi\").appendChild(this.curr_track)\r\n\r\n\r\n\r\n\r\n\r\n    // Define the list of tracks that have to be played\r\n    track_list = [\r\n        {\r\n            name: \"ghungroo\",\r\n            artist: \"\",\r\n            image: \"Image URL\",\r\n\r\n            path: \"Ghungroo Song _ War _ Hrithik Roshan_ Vaani Kapoor(MP3_160K).mp3\",\r\n        },\r\n        {\r\n            name: \"o baby girl\",\r\n            artist: \"\",\r\n            image: \"Image URL\",\r\n            path: \"Oh-Baby-Girl-MassTamilan.com.mp3\",\r\n\r\n        },\r\n        {\r\n            name: \"Cruel summer\",\r\n            artist: \"Taylor swift\",\r\n            image: \"Image URL\",\r\n\r\n            path: \"Taylor Swift - Cruel Summer (Official Audio)(MP3_160K).mp3\"\r\n        },\r\n    ];\r\n\r\n\r\n    constructor() {\r\n        this.loadTrack(0);\r\n\r\n        this.name;\r\n\r\n        // this.curr_track = this.curr_track\r\n        // console.log(this.curr_track)\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    loadTrack(track_index: number) {\r\n        // Clear the previous seek timer\r\n        clearInterval(this.updateTimer);\r\n        this.resetValues();\r\n\r\n        // Load a new track\r\n        this.curr_track.src = this.track_list[track_index].path;\r\n\r\n        this.curr_track.load();\r\n\r\n\r\n        this.curr_track.preload = \"metadata\"\r\n\r\n        this.curr_track.onloadedmetadata = () => {\r\n            console.log(this.curr_track.duration)\r\n        };\r\n\r\n\r\n        console.log(this.curr_track, this.name)\r\n\r\n\r\n\r\n\r\n        // Update details of the track\r\n        this.track_art.style.backgroundImage =\r\n            \"url(\" + this.track_list[track_index].image + \")\";\r\n        this.track_name.textContent = this.track_list[track_index].name;\r\n        this.track_artist.textContent = this.track_list[track_index].artist;\r\n        this.now_playing.textContent =\r\n            \"PLAYING \" + (track_index + 1) + \" OF \" + this.track_list.length;\r\n\r\n        // Set an interval of 1000 milliseconds\r\n        // for updating the seek slider\r\n        this.updateTimer = setInterval(this.seekUpdate, 1000);\r\n\r\n        // Move to the next track if the current finishes playing\r\n        // using the 'ended' event\r\n        this.curr_track.addEventListener(\"ended\", this.nextTrack);\r\n\r\n    }\r\n\r\n    seekUpdate() {\r\n        let seekPosition = 0;\r\n\r\n        console.log(this.name)\r\n\r\n        console.log(this.curr_track)\r\n\r\n        console.log(this.curr_track.duration && this.curr_track.src, \"ji\")\r\n        // Check if the current track duration is a legible number\r\n        if (!isNaN(this.curr_track.duration)) {\r\n            seekPosition = this.curr_track.currentTime * (100 / this.curr_track.duration);\r\n            this.seek_slider.value = `${seekPosition}`;\r\n\r\n            // Calculate the time left and the total duration\r\n            let currentMinutes = Math.floor(this.curr_track.currentTime / 60);\r\n            let currentSeconds = Math.floor(this.curr_track.currentTime - currentMinutes * 60);\r\n            let durationMinutes = Math.floor(this.curr_track.duration / 60);\r\n            let durationSeconds = Math.floor(this.curr_track.duration - durationMinutes * 60);\r\n\r\n            // Add a zero to the single digit time values\r\n            if (currentSeconds < 10) { currentSeconds = 0 + currentSeconds; }\r\n            if (durationSeconds < 10) { durationSeconds = 0 + durationSeconds; }\r\n            if (currentMinutes < 10) { currentMinutes = 0 + currentMinutes; }\r\n            if (durationMinutes < 10) { durationMinutes = 0 + durationMinutes; }\r\n\r\n            // Display the updated duration\r\n            this.curr_time.textContent = currentMinutes + \":\" + currentSeconds;\r\n            this.total_duration.textContent = durationMinutes + \":\" + durationSeconds;\r\n        }\r\n    }\r\n\r\n    // to reset all values to their default\r\n    resetValues() {\r\n        this.curr_time.textContent = \"00:00\";\r\n        this.total_duration.textContent = \"00:00\";\r\n        this.seek_slider.value = \"0\";\r\n    }\r\n\r\n\r\n    playpauseTrack() {\r\n        // Switch between playing and pausing\r\n        // depending on the current state\r\n        if (!this.isPlaying) this.playTrack();\r\n        else this.pauseTrack();\r\n    }\r\n\r\n    playTrack() {\r\n        // Play the loaded track\r\n        this.curr_track.play();\r\n        this.isPlaying = true;\r\n\r\n        // Replace icon with the pause icon\r\n        this.playpause_btn.innerHTML = '<i class=\"fa fa-pause-circle fa-5x\"></i>';\r\n    }\r\n\r\n    pauseTrack() {\r\n        // Pause the loaded track\r\n        this.curr_track.pause();\r\n        this.isPlaying = false;\r\n\r\n        // Replace icon with the play icon\r\n        this.playpause_btn.innerHTML = '<i class=\"fa fa-play-circle fa-5x\"></i>';\r\n    }\r\n\r\n    nextTrack() {\r\n        // Go back to the first track if the\r\n        // current one is the last in the track list\r\n        if (this.track_index < this.track_list.length - 1)\r\n            this.track_index += 1;\r\n        else this.track_index = 0;\r\n\r\n        // Load and play the new track\r\n        this.loadTrack(this.track_index);\r\n        this.playTrack();\r\n    }\r\n\r\n    prevTrack() {\r\n        // Go back to the last track if the\r\n        // current one is the first in the track list\r\n        if (this.track_index > 0)\r\n            this.track_index -= 1;\r\n        else this.track_index = this.track_list.length - 1;\r\n\r\n        // Load and play the new track\r\n        this.loadTrack(this.track_index);\r\n        this.playTrack();\r\n    }\r\n\r\n\r\n    seekTo() {\r\n        // Calculate the seek position by the``\r\n        // percentage of the seek slider\r\n        // and get the relative duration to the track\r\n\r\n\r\n\r\n        let seekto = this.curr_track.duration * ((parseInt(this.seek_slider.value)) / 100);\r\n\r\n        // Set the current track position to the calculated seek position\r\n        this.curr_track.currentTime = seekto;\r\n    }\r\n\r\n    setVolume() {\r\n        // Set the volume according to the\r\n        // percentage of the volume slider set\r\n        this.curr_track.volume = parseInt(this.volume_slider.value) / 100;\r\n    }\r\n\r\n\r\n\r\n\r\n    // Load the first track in the tracklist\r\n\r\n\r\n\r\n\r\n}\r\n\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n"," import { Music} from \"./music\"\r\n \r\n // Load the first track in the tracklist\r\n let mymusic=new Music()\r\n  \r\n\r\n \r\n"],"names":["now_playing","document","querySelector","track_art","track_name","track_artist","playpause_btn","next_btn","prev_btn","name","seek_slider","volume_slider","curr_time","total_duration","track_index","isPlaying","curr_track","createElement","track_list","artist","image","path","this","loadTrack","clearInterval","updateTimer","resetValues","src","load","preload","onloadedmetadata","console","log","duration","style","backgroundImage","textContent","length","setInterval","seekUpdate","addEventListener","nextTrack","seekPosition","isNaN","currentTime","value","currentMinutes","Math","floor","currentSeconds","durationMinutes","durationSeconds","playpauseTrack","pauseTrack","playTrack","play","innerHTML","pause","prevTrack","seekTo","seekto","parseInt","setVolume","volume","Music","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__"],"sourceRoot":""}